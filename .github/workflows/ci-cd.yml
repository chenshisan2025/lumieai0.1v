name: LUMIEAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.16.0'
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Flutter App Tests
  flutter-test:
    name: Flutter Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
    
    - name: Get Flutter dependencies
      working-directory: ./flutter_app
      run: flutter pub get
    
    - name: Analyze Flutter code
      working-directory: ./flutter_app
      run: flutter analyze
    
    - name: Run Flutter tests
      working-directory: ./flutter_app
      run: flutter test
    
    - name: Build APK
      working-directory: ./flutter_app
      run: flutter build apk --release
    
    - name: Build iOS (macOS only)
      if: runner.os == 'macOS'
      working-directory: ./flutter_app
      run: flutter build ios --release --no-codesign

  # Backend API Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      working-directory: ./backend_api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      working-directory: ./backend_api
      run: |
        black --check .
        isort --check-only .
        flake8 .
    
    - name: Run type checking
      working-directory: ./backend_api
      run: mypy .
    
    - name: Run tests
      working-directory: ./backend_api
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: pytest -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend_api/coverage.xml

  # Smart Contract Tests
  contracts-test:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './contracts/package-lock.json'
    
    - name: Install Hardhat dependencies
      working-directory: ./contracts
      run: npm ci
    
    - name: Compile contracts
      working-directory: ./contracts
      run: npx hardhat compile
    
    - name: Run contract tests
      working-directory: ./contracts
      run: npx hardhat test
    
    - name: Run coverage
      working-directory: ./contracts
      run: npx hardhat coverage

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Deploy
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [flutter-test, backend-test, contracts-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend_api
        push: true
        tags: lumieai/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment commands here
        # e.g., kubectl apply, docker-compose up, etc.

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#lumieai-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}