name: LUMIEAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.16.0'
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Flutter App Tests
  flutter-test:
    name: Flutter Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
    
    - name: Get Flutter dependencies
      working-directory: ./flutter_app
      run: flutter pub get
    
    - name: Analyze Flutter code
      working-directory: ./flutter_app
      run: flutter analyze
    
    - name: Run Flutter tests
      working-directory: ./flutter_app
      run: flutter test
    
    - name: Build APK
      working-directory: ./flutter_app
      run: flutter build apk --release
    
    - name: Build iOS (macOS only)
      if: runner.os == 'macOS'
      working-directory: ./flutter_app
      run: flutter build ios --release --no-codesign

  # Backend API Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      working-directory: ./backend_api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      working-directory: ./backend_api
      run: |
        black --check .
        isort --check-only .
        flake8 .
    
    - name: Run type checking
      working-directory: ./backend_api
      run: mypy .
    
    - name: Run tests
      working-directory: ./backend_api
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: pytest -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend_api/coverage.xml

  # Smart Contract Tests
  contracts-test:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './contracts/package-lock.json'
    
    - name: Install Hardhat dependencies
      working-directory: ./contracts
      run: npm ci
    
    - name: Compile contracts
      working-directory: ./contracts
      run: npx hardhat compile
    
    - name: Run contract tests
      working-directory: ./contracts
      run: npx hardhat test
    
    - name: Run coverage
      working-directory: ./contracts
      run: npx hardhat coverage

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js for security tools
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install secretlint
      run: npm install -g @secretlint/cli @secretlint/secretlint-rule-preset-recommend
    
    - name: Run secretlint
      run: secretlint "**/*"
    
    - name: Install dotenv-linter
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s
        sudo mv ./bin/dotenv-linter /usr/local/bin/
    
    - name: Run dotenv-linter
      run: dotenv-linter
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Smart Contract Security Audit (Optional)
  contract-security:
    name: Contract Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Hardhat and Slither
      working-directory: ./contracts
      run: |
        npm ci
        pip3 install slither-analyzer
    
    - name: Compile contracts
      working-directory: ./contracts
      run: npx hardhat compile
    
    - name: Run Slither analysis
      working-directory: ./contracts
      run: |
        slither . --json slither-report.json || true
        if [ -f slither-report.json ]; then
          echo "Slither analysis completed. Check the report for potential issues."
          cat slither-report.json
        fi
    
    - name: Upload Slither report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: slither-report
        path: contracts/slither-report.json

  # Build Mobile Apps
  build-mobile:
    name: Build Mobile Apps
    runs-on: macos-latest
    needs: [flutter-test, backend-test, contracts-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
    
    - name: Setup Java for Android
      uses: actions/setup-java@v5
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Get Flutter dependencies
      working-directory: ./flutter_app
      run: flutter pub get
    
    - name: Build Android AAB
      working-directory: ./flutter_app
      run: |
        flutter build appbundle --release
        echo "Android AAB built successfully"
    
    - name: Upload Android AAB to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-aab
        path: flutter_app/build/app/outputs/bundle/release/app-release.aab
    
    - name: Setup Xcode for iOS
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Build iOS IPA
      working-directory: ./flutter_app
      run: |
        flutter build ios --release --no-codesign
        echo "iOS build completed"
    
    - name: Archive and Export iOS IPA
      working-directory: ./flutter_app
      run: |
        # Create archive
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/ios/Runner.xcarchive \
          archive
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath build/ios/Runner.xcarchive \
          -exportPath build/ios/ipa \
          -exportOptionsPlist ios/ExportOptions.plist
    
    - name: Upload to TestFlight
      if: env.TESTFLIGHT_ENABLED == 'true'
      working-directory: ./flutter_app
      run: |
        # Install altool if needed
        xcrun altool --upload-app \
          --type ios \
          --file build/ios/ipa/Runner.ipa \
          --username "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_PASSWORD }}"
      env:
        TESTFLIGHT_ENABLED: ${{ secrets.TESTFLIGHT_ENABLED }}
    
    - name: Upload iOS IPA to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa
        path: flutter_app/build/ios/ipa/Runner.ipa

  # Build and Deploy Backend
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [flutter-test, backend-test, contracts-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend_api
        push: true
        tags: |
          lumieai/backend:latest
          lumieai/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to test environment
      run: |
        echo "Deploying backend to test environment..."
        echo "Docker image: lumieai/backend:${{ github.sha }}"
        # Add your deployment commands here
        # e.g., kubectl apply, docker-compose up, etc.

  # Deploy Smart Contracts (Requires Approval)
  deploy-contracts:
    name: Deploy Smart Contracts to Testnet
    runs-on: ubuntu-latest
    needs: [contracts-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: testnet-deployment  # This requires manual approval
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './contracts/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./contracts
      run: npm ci
    
    - name: Compile contracts
      working-directory: ./contracts
      run: npx hardhat compile
    
    - name: Deploy to BSC Testnet
      working-directory: ./contracts
      env:
        PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
        BSC_TESTNET_RPC_URL: ${{ secrets.BSC_TESTNET_RPC_URL }}
        BSCSCAN_API_KEY: ${{ secrets.BSCSCAN_API_KEY }}
      run: |
        echo "Deploying contracts to BSC Testnet..."
        npx hardhat run scripts/deploy.js --network bscTestnet
        echo "Contract deployment completed"
    
    - name: Verify contracts on BSCScan
      working-directory: ./contracts
      env:
        BSCSCAN_API_KEY: ${{ secrets.BSCSCAN_API_KEY }}
      run: |
        echo "Verifying contracts on BSCScan..."
        npx hardhat run scripts/verify.js --network bscTestnet
        echo "Contract verification completed"

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-mobile, deploy-backend, deploy-contracts]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Notify Slack
      if: env.SLACK_WEBHOOK_URL != ''
      run: |
        mobile_status="${{ needs.build-mobile.result }}"
        backend_status="${{ needs.deploy-backend.result }}"
        contracts_status="${{ needs.deploy-contracts.result }}"
        
        if [ "$mobile_status" == "success" ] && [ "$backend_status" == "success" ] && [ "$contracts_status" == "success" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ LumieAI full deployment successful! Mobile apps built, backend deployed, contracts deployed to testnet."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        else
          message="❌ LumieAI deployment issues: "
          [ "$mobile_status" != "success" ] && message="${message}Mobile build failed. "
          [ "$backend_status" != "success" ] && message="${message}Backend deployment failed. "
          [ "$contracts_status" != "success" ] && message="${message}Contract deployment failed. "
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$message\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}